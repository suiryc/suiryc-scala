suiryc-scala {

  # Some logger settings.
  logger {

    # Configuration reloading.
    reload {
      # Whether to reload on signal (SIGHUP).
      signal = true

      changes {
        # Whether to reload on changes (in logger file configuration).
        enabled = true
        # Interval between changes checking.
        period = 10s
      }

    }

    # Whether an internal (logger context) status listener is enabled.
    # It prints out recent status messages upon warnings or errors.
    status-listener.enabled = true

  }

  akka = ${akka} {
    # We don't want the core system preventing the JVM to exit, so:
    #  - make its threads daemonic
    #  - disable automatic termination through shutdown hook: let the
    #    application explictly do it when necessary
    # See: https://doc.akka.io/docs/akka/current/coordinated-shutdown.html#coordinated-shutdown
    daemonic = on
    coordinated-shutdown.run-by-jvm-shutdown-hook = off

    scheduler {
      # Use higher tick duration since we (usually) don't require high-throughput.
      # This helps save a few 1/10th percents CPU usage for small applications when idle.
      tick-duration = 100ms
    }
  }

  # Dispatchers (and executors).
  # We rely on akka to create dedicated dispatchers (in dedicated actor systems).
  # See: https://doc.akka.io/docs/akka/2.6.15/dispatchers.html?language=scala
  dispatcher {

    # Dispatcher dedicated to non-blocking code.
    # If not set, all default parameters are used.
    non-blocking = null

    # Dispatcher dedicated to blocking code.
    # This is used to handle akka system/actors which may execute blocking
    # code, as well as when wrapping blocking code in a Future to convert it
    # to an asynchronous execution usable by a non-blocking caller.
    #
    # Notes:
    # With "thread-pool-executor", caller (Future creation, akka scheduler if
    # scheduling code execution, akka default dispatcher when executing actor
    # code) blocks when bounded queue (task-queue-size >= 1) is full, making
    # bounded queue mostly unusable.
    # With unbounded queue, only fixed pool size makes sense, but has the
    # downside of creating new threads for each new code execution unless pool
    # size has been reached, even if an existing thread is available for use.
    #
    # "fork-join-executor" works better (as long as a dedicated dispatcher is
    # involved as we do here), but some JVM 1.8.0 versions appear to have a
    # bug consuming a lot of CPU when code to execute is explicitly marked
    # as 'blocking' (which is a hint for the executor).
    # Since using 'blocking' hinting is mostly meant to mix non-blocking and
    # blocking code execution in the same executor, we don't use it, and should
    # be able to rely on "fork-join-executor" without triggering the bug.
    #
    # Pool size must not exceed ~32000: trying to manage this many threads
    # usually make the implementation crash, and requires a lot of memory (JVM
    # can easily trigger OOM).
    blocking {
      type = "Dispatcher"
      executor = "fork-join-executor"
      thread-pool-executor {
        core-pool-size-min = 1024
        core-pool-size-max = 1024
        max-pool-size-min = 1024
        max-pool-size-max = 1024
      }
      fork-join-executor {
        parallelism-min = 1024
        parallelism-max = 1024
      }
      shutdown-timeout = 10s
      throughput = 2
    }

  }

}
